2- Design Challenge


Problem statement:

As a future ProDoctivity Development Team's member you are challenged to provide a design for the following feature:

Our product has the following concept:

- Document: Is a binary document of any type (Image (or images), Word Document, PDF, etc) and a set of keywords and records that are configured in the application's admin module. Documents also have status.
- Status: Published, InProgress, Deleted
- Record: Is a set of keyword and it's values. Records can also contains more records.
- Keyword: Is a definition of name, data type, and it's value (or values)
- Data type: Can be string, number, boolean, date or a predefined string list (eg: ["Active"; "Inactive"]

What we need as a new feature:

We need to allow the user to have the ability of "versioning" documents in the following way:

- New documents are the first in their version stream, so they don't belong to any other version.

- A documents can be a new version of another document.

- A change in a document's binary file is considered a whole new document's version

- A change in a document's keywords or records is also considered a whole new document's version

- A change in both is also a new document version

- If there is a binary without keywords and records, then the previous version's one are taken.

- If there is a set of keywords and records without a binary, then the previous version's one are taken.

- A document status change is also considered a new version.


What we need from you:

- Provide an architectural design of how would you implement this new feature in terms of:
	- Service definition. We need roughly the following:
		- A way to get the "Published" version of a document and fetch it.
		- A way to get the "Latest" version of a document and fetch it.
		- A way to pinpoint a specific version of a document and fetch it.
		- A way to get all different changes (or versions) of a given document
	- Web Endpoints (how the web app would communicate and expose your service and how external clients could use your service as an API)
	- Data structures
	- Data storage: (DB engines, data structure overview)
	- Components overview

Take into account that:

- We use a single-page web application and everything we do must be called into an http service

What you need to provide

- You need to provide the design of such feature.
- You do not need to provide code
- You do not need to cover 100% of everything
- There is no need to be super-formal, after all this is a test and we know we are taking some of your time.
- Maximum 3 pages of a Word document

Thank you and forgive us,	
